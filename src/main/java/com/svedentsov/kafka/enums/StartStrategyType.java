package com.svedentsov.kafka.enums;

/**
 * Перечисление, определяющее стратегию начальной точки чтения из топика Kafka.
 */
public enum StartStrategyType {
    /**
     * Поведение по умолчанию Kafka. Если есть закоммиченное смещение для группы потребителей,
     * чтение начнется с него. В противном случае применяется политика `auto.offset.reset`
     * (по умолчанию 'latest').
     * Идеально подходит для симуляции стандартного поведения микросервиса.
     */
    DEFAULT,
    /**
     * Начинать читать только новые сообщения (аналог seekToEnd).
     * Потребитель начнет получать сообщения, которые будут отправлены в топик
     * после его запуска.
     * Полезно для тестов, которые должны реагировать только на вновь поступающие данные.
     */
    LATEST,
    /**
     * Начинать читать с самого начала топика (аналог seekToBeginning).
     * Потребитель получит все сообщения, которые когда-либо были в топике,
     * в пределах срока их хранения (retention period).
     * Отлично подходит для полной перепроверки исторических данных.
     */
    EARLIEST,
    /**
     * Начинать читать с определенной временной метки.
     * Потребитель будет смещен к первому сообщению, временная метка которого
     * больше или равна (now - lookBackDuration).
     * Используется для выборочной обработки данных за определенный период.
     */
    FROM_TIMESTAMP,
    /**
     * Начинать чтение с определенного смещения (offset) для каждой партиции.
     * Требует предоставления карты смещений для каждой партиции.
     * Крайне полезно для точного воспроизведения сценариев, связанных с конкретными сообщениями.
     */
    FROM_SPECIFIC_OFFSET,
    /**
     * Начинать чтение с позиции, относительной к концу партиции (например, последние N сообщений).
     * Требует указания количества сообщений, отсчитываемых от конца.
     * Удобно для быстрых "smoke" тестов, которые проверяют только самые свежие данные.
     */
    RELATIVE_FROM_END
}
